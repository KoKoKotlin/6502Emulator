package me.kokokotlin.main.asm

import me.kokokotlin.main.Word
import me.kokokotlin.main.mem.*


fun instructionFromOpcode(opcode: UByte) =
        when (opcode.toInt()) {
            0x69, 0x65, 0x75, 0x6D, 0x7D, 0x79, 0x61, 0x71 -> "adc"
            0x29, 0x25, 0x35, 0x2D, 0x3D, 0x39, 0x21, 0x31 -> "and"
            0x0A, 0x06, 0x16, 0x0E, 0x1E -> "asl"
            0x90 -> "bcc"
            0xB0 -> "bcs"
            0xF0 -> "beq"
            0x24, 0x2C -> "bit"
            0x30 -> "bmi"
            0xD0 -> "bne"
            0x10 -> "bpl"
            0x00 -> "brk"
            0x50 -> "bvc"
            0x70 -> "bvs"
            0x18 -> "clc"
            0xD8 -> "cld"
            0x58 -> "cli"
            0xB8 -> "clv"
            0xC9, 0xC5, 0xD5, 0xCD, 0xDD, 0xD9, 0xC1, 0xD1 -> "cmp"
            0xE0, 0xE4, 0xEC -> "cpx"
            0xC0, 0xC4, 0xCC -> "cpy"
            0xC6, 0xD6, 0xCE, 0xDE -> "dec"
            0xCA -> "dex"
            0x88 -> "dey"
            0x49, 0x45, 0x55, 0x4D, 0x5D, 0x59, 0x41, 0x51 -> "eor"
            0xE6, 0xF6, 0xEE, 0xFE -> "inc"
            0xE8 -> "inx"
            0xC8 -> "iny"
            0x4C, 0x6C -> "jmp"
            0x20 -> "jsr"
            0xA9, 0xA5, 0xB5, 0xAD, 0xBD, 0xB9, 0xA1, 0xB1 -> "lda"
            0xA2, 0xA6, 0xB6, 0xAE, 0xBE -> "ldx"
            0xA0, 0xA4, 0xB4, 0xAC, 0xBC -> "ldy"
            0x4A, 0x46, 0x56, 0x4E, 0x5E -> "lsr"
            0xEA -> "nop"
            0x05, 0x09, 0x15, 0x0D, 0x1D, 0x19, 0x01, 0x11 -> "ora"
            0x48 -> "pha"
            0x08 -> "php"
            0x68 -> "pla"
            0x28 -> "plp"
            0x2A, 0x26, 0x36, 0x2E, 0x3E -> "rol"
            0x6A, 0x66, 0x76, 0x6E, 0x7E -> "ror"
            0x40 -> "rti"
            0x60 -> "rts"
            0xE9, 0xE5, 0xF5, 0xED, 0xFD, 0xF9, 0xE1, 0xF1 -> "sbc"
            0x38 -> "sec"
            0xF8 -> "sed"
            0x78 -> "sei"
            0x85, 0x95, 0x8D, 0x9D, 0x99, 0x81, 0x91 -> "sta"
            0x86, 0x96, 0x8E -> "stx"
            0x84, 0x94, 0x8C -> "sty"
            0xAA -> "tax"
            0xA8 -> "tay"
            0xBA -> "tsx"
            0x8A -> "txa"
            0x9A -> "txs"
            0x98 -> "tya"
            else -> null
        }


/**
 * imm = Immediate
 * imp = Implied
 * ipa = Implied A
 * ipx = Implied X
 * ipy = Implied Y
 * zer = Zeropage
 * zrx = Zeropage X Offset
 * zry = Zeropage Y Offset
 * abs = Absolute
 * abx = Absolute X index
 * aby = Absolute Y index
 * ind = Indirect
 * idx = Indirect X index
 * idy = Indirect Y index
 * rel = Relative jump
 * */
fun memoryModeFromOpcode(opcode: UByte) =
        when (opcode.toInt()) {
            0x29, 0xC9, 0xE0, 0xC0, 0x49, 0xA9, 0xA2, 0xA0, 0x69, 0x09, 0xE9 -> Immediate
            0x65, 0x25, 0x06, 0x24, 0xC5, 0xE4, 0xC4, 0xC6, 0x45, 0xE6, 0xA5, 0xA6, 0xA4, 0x46, 0x05, 0x26,
            0x66, 0xE5, 0x85, 0x86, 0x84 -> ZeroPage
            0x75, 0x35, 0x16, 0xD5, 0xD6, 0x55, 0xF6, 0xB5, 0xB4, 0x56, 0x15, 0x36, 0x76, 0xF5, 0x95, 0x94 -> ZeroPageIndexedX
            0xB6, 0x96 -> ZeroPageIndexedY
            0x6D, 0x2D, 0x0E, 0x2C, 0xCD, 0xEC, 0xCC, 0xCE, 0x4D, 0xEE, 0x4C, 0x20, 0xAD, 0xAE, 0xAC, 0x4E,
            0x0D, 0x2E, 0x6E, 0xED, 0x8D, 0x8E, 0x8C -> Absolute
            0x7D, 0x3D, 0x1E, 0xDD, 0xDE, 0x5D, 0xFE, 0xBD, 0xBC, 0x5E, 0x1D, 0x3E, 0x7E, 0xFD, 0x9D -> AbsoluteX
            0x79, 0x39, 0xD9, 0x59, 0xB9, 0xBE, 0x19, 0xF9, 0x99 -> AbsoluteY
            0x6C -> JumpRelative
            0x61, 0x21, 0xC1, 0x41, 0xA1, 0x01, 0xE1, 0x81 -> IndexedIndirectX
            0x71, 0x31, 0xD1, 0x51, 0xB1, 0x11, 0xF1, 0x91 -> IndexedIndirectY
            0x00, 0x18, 0xD8, 0x58, 0xB8, 0xEA, 0x08, 0x28, 0x40, 0x60, 0x38, 0xF8, 0x78, 0xAA, 0xA8,
            0xBA, 0x8A, 0x9A, 0x98 -> Implied
            0x48, 0x68, 0x4A, 0x2A, 0x6A, 0x0A -> ImpliedA
            0xCA, 0xE8 -> ImpliedX
            0x88, 0xC8 -> ImpliedY
            0x90, 0xB0, 0xF0, 0x30, 0xD0, 0x10, 0x50, 0x70 -> BranchRelative
            else -> null
        }

fun debugPrint(opcode: UByte, name: String, addressMode: String, param: Word, paramLen: UInt) {
    println("Decoded 0x${opcode.toString(16)} " +
            "which is '$name' with addrMode: '${addressMode.split(".").last()}' " +
            "with paramLen $paramLen " +
            "and param 0x${param.toString(16)}")
}